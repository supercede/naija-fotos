{
  "openapi": "3.0.0",
  "servers": [
    {
      "description": "localhost server",
      "url": "http:/localhost:5000"
    }
  ],
  "info": {
    "description": "Something about photos",
    "version": "1.0.0",
    "title": "Naijafotos API docs",
    "contact": {
      "email": "coderlong.io@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "users",
      "description": "Operations available to all users (admins and moderators included)"
    },
    {
      "name": "admins",
      "description": "Operations available to admins"
    },
    {
      "name": "moderators",
      "description": "Operations available to moderators"
    }
  ],
  "paths": {
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "user signup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "signup successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "user with email address or username is already registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationConflictResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "log in to user account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSigninRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "email or password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserIncorrectDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/{provider}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "authenticate a user using 3rd party social accounts",
        "parameters": [
          {
            "in": "path",
            "name": "provider",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "accepted providers are either facebook or google"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful first time sign in by user (Account created)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful subsequent sign in by user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/v1/auth/forgot-password": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "send password reset to user mail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailSchema"
              }
            }
          },
          "required": true,
          "description": "email address of the user"
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailValidationErrorResponseSchema"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailErrorResponseSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/reset-password": {
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "reset user password",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "user token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordValidationErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token/token from unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidTokenErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "summary": "Get all users",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validListOfUserSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "api/v1/users/avatar": {
      "patch": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token"
          },
          {
            "in": "cookie",
            "name": "jwt",
            "schema": {
              "type": "apiKey"
            },
            "required": true,
            "description": "Cookie can be used in place of Bearer Token"
          }
        ],
        "summary": "Upload user profile Image",
        "requestBody": {
          "required": true,
          "description": "image file in the 'avatar' field",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "image",
                    "format": "png, jpg, jpeg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validUserResponseSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "api/v1/users/{userid}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a user details",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "id for user"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validUserResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/v1/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token"
          },
          {
            "in": "cookie",
            "name": "jwt",
            "schema": {
              "type": "apiKey"
            },
            "required": true,
            "description": "Cookie can be used in place of Bearer Token"
          }
        ],
        "summary": "Get details for current logged in user (in cookie or token)",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validUserSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/v1/users/{:userId}/photos": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a user's photos",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "id for user"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validListOfPhotoSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/v1/users/myPhotos": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "apiKey"
            },
            "required": true,
            "description": "Bearer token"
          },
          {
            "in": "cookie",
            "name": "jwt",
            "schema": {
              "type": "apiKey"
            },
            "required": true,
            "description": "Cookie can be used in place of Bearer Token"
          }
        ],
        "summary": "Get a user's photos",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validListOfPhotoSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/v1/users/updateMe": {
      "patch": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "apiKey"
            },
            "required": true,
            "description": "Bearer token"
          },
          {
            "in": "cookie",
            "name": "jwt",
            "schema": {
              "type": "apiKey"
            },
            "required": true,
            "description": "Cookie can be used in place of Bearer Token"
          }
        ],
        "summary": "update a logged in user profile",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validUserResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad/malformed request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "api/v1/users/deleteMe": {
      "delete": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "apiKey"
            },
            "required": true,
            "description": "Bearer token"
          },
          {
            "in": "cookie",
            "name": "jwt",
            "schema": {
              "type": "apiKey"
            },
            "required": true,
            "description": "Cookie can be used in place of Bearer Token"
          }
        ],
        "summary": "delete a logged in user account",
        "responses": {
          "204": {
            "description": "success (No content)"
          },
          "400": {
            "description": "Bad/malformed request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "api/v1/photos": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tagParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "summary": "Get all photos",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validListOfPhotoSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Post a photo",
        "requestBody": {
          "required": true,
          "description": "image file in the 'photo' field",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo": {
                    "type": "image",
                    "format": "png, jpg, jpeg"
                  },
                  "tags": {
                    "type": "array",
                    "example": [
                      "person",
                      "outside"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "example": "An awesome picture"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validPhotoResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad/malformed request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "api/v1/{:photoId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a particular photo",
        "parameters": [
          {
            "in": "path",
            "name": "photoId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "id for photo"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validPhotoResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "apiKey"
            },
            "required": true,
            "description": "Bearer token"
          },
          {
            "in": "cookie",
            "name": "jwt",
            "schema": {
              "type": "apiKey"
            },
            "required": true,
            "description": "Cookie can be used in place of Bearer Token"
          },
          {
            "in": "path",
            "name": "photoId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "id for photo"
          }
        ],
        "summary": "Update photo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/validPhotoUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validPhotoResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad/malformed request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "apiKey"
            },
            "required": true,
            "description": "Bearer token"
          },
          {
            "in": "cookie",
            "name": "jwt",
            "schema": {
              "type": "apiKey"
            },
            "required": true,
            "description": "Cookie can be used in place of Bearer Token"
          },
          {
            "in": "path",
            "name": "photoId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "id for photo"
          }
        ],
        "summary": "delete a photo",
        "responses": {
          "204": {
            "description": "success (No content)"
          },
          "400": {
            "description": "Bad/malformed request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EmailSchema": {
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "killua@hunteracademy.com"
          }
        }
      },
      "ResetPasswordSchema": {
        "required": [
          "password",
          "passwordConfirm"
        ],
        "properties": {
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          },
          "passwordConfirm": {
            "type": "string",
            "format": "password",
            "example": "password123"
          }
        }
      },
      "UserRegistrationRequest": {
        "required": [
          "name",
          "email",
          "userName",
          "password",
          "passwordConfirm"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Killua Mustang"
          },
          "userName": {
            "type": "string",
            "example": "killi_19"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "killua@hunteracademy.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          },
          "passwordConfirm": {
            "type": "string",
            "format": "password",
            "example": "password123"
          },
          "portfolio": {
            "type": "string",
            "format": "url",
            "example": "www.mysite.com"
          }
        }
      },
      "UserUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "example": "Killua Mustang"
          },
          "userName": {
            "type": "string",
            "example": "killi_19"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "killua@hunteracademy.com"
          },
          "portfolio": {
            "type": "string",
            "format": "url",
            "example": "www.mysite.com"
          }
        }
      },
      "UserSigninRequest": {
        "required": [
          "email (value can be email or username of user)",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "killua@hunteracademy.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": 123456789
          }
        }
      },
      "UserRegistrationResponse": {
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string",
                    "format": "mongoose ObjectID",
                    "example": "5ea71dbd8121dd1808f6e7fe"
                  },
                  "name": {
                    "type": "string",
                    "example": "Killua Mustang"
                  },
                  "userName": {
                    "type": "string",
                    "example": "killi_19"
                  },
                  "portfolio": {
                    "type": "string",
                    "example": "www.mysite.com"
                  },
                  "local": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "email",
                        "format": "email",
                        "example": "killua@hunteracademy.com"
                      }
                    }
                  },
                  "active": {
                    "type": "boolean",
                    "example": true
                  }
                }
              },
              "token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6Ikp[...]"
              }
            }
          }
        }
      },
      "UserRegistrationErrorResponse": {
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "validation error"
              },
              "errors": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "name is required"
                  },
                  "userName": {
                    "type": "string",
                    "example": "Use only numbers, letters and underscores"
                  },
                  "password": {
                    "type": "string",
                    "example": "Password should be between 8 to 20 characters"
                  },
                  "passwordConfirm": {
                    "type": "string",
                    "example": "Passwords don't match"
                  }
                }
              }
            }
          }
        }
      },
      "UserRegistrationConflictResponse": {
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "validation error"
              },
              "errors": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "Email already registered, log in instead"
                  },
                  "userName": {
                    "type": "string",
                    "example": "Username exists, please try another"
                  }
                }
              }
            }
          }
        }
      },
      "UserIncorrectDetailsResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Incorrect email or password."
              }
            }
          }
        }
      },
      "EmailErrorResponseSchema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Problem sending mail, try again later"
              }
            }
          }
        }
      },
      "EmailValidationErrorResponseSchema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "validation error"
              },
              "errors": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "Email address is required"
                  }
                }
              }
            }
          }
        }
      },
      "PasswordValidationErrorSchema": {
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "validation error"
              },
              "errors": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "example": "password is required"
                  },
                  "passwordConfirm": {
                    "type": "string",
                    "example": "passwords do not match"
                  }
                }
              }
            }
          }
        }
      },
      "InvalidTokenErrorSchema": {
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Reset Token is invalid or expired"
              }
            }
          }
        }
      },
      "validListOfUserSchema": {
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/validUserSchema"
                }
              }
            }
          }
        }
      },
      "validUserResponseSchema": {
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string",
                    "format": "mongoose ObjectID",
                    "example": "5ea71dbd8121dd1808f6e7fe"
                  },
                  "name": {
                    "type": "string",
                    "example": "Killua Mustang"
                  },
                  "userName": {
                    "type": "string",
                    "example": "killi_19"
                  },
                  "local": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "email",
                        "format": "email",
                        "example": "killua@hunteracademy.com"
                      }
                    }
                  },
                  "avatar": {
                    "type": "string",
                    "example": "https://res.cloudinary.com/mycloud/image/upload/v1588371243/my-folder/ctdoiku4lurn1a0hwt0t.jpg"
                  },
                  "portfolio": {
                    "type": "string",
                    "example": "www.mysite.com"
                  }
                }
              }
            }
          }
        }
      },
      "validListOfPhotoSchema": {
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "photos": {
            "type": "object",
            "properties": {
              "photos": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/validPhotoSchema"
                }
              }
            }
          }
        }
      },
      "validPhotoResponseSchema": {
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "photo": {
            "$ref": "#/components/schemas/validPhotoSchema"
          }
        }
      },
      "validUserSchema": {
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoose ObjectID",
            "example": "5ea71dbd8121dd1808f6e7fe"
          },
          "name": {
            "type": "string",
            "example": "Killua Mustang"
          },
          "userName": {
            "type": "string",
            "example": "killi_19"
          },
          "local": {
            "type": "object",
            "properties": {
              "email": {
                "type": "email",
                "format": "email",
                "example": "killua@hunteracademy.com"
              }
            }
          },
          "portfolio": {
            "type": "string",
            "format": "url",
            "example": "www.mysite.com"
          },
          "avatar": {
            "type": "string",
            "example": "https://res.cloudinary.com/mycloud/image/upload/v1588371243/my-folder/ctdoiku4lurn1a0hwt0t.jpg"
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "validPhotoUpdateSchema": {
        "properties": {
          "tags": {
            "type": "array",
            "example": [
              "person",
              "outside"
            ]
          },
          "description": {
            "type": "string",
            "example": "An awesome picture"
          }
        }
      },
      "validPhotoSchema": {
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoose ObjectID",
            "example": "5ea71dbd8121dd1808f6e7fe"
          },
          "upvoteCount": {
            "type": "number",
            "example": 0
          },
          "commentCount": {
            "type": "number",
            "example": 0
          },
          "tags": {
            "type": "array",
            "example": [
              "person",
              "outside"
            ]
          },
          "imageURL": {
            "type": "string",
            "example": "https://res.cloudinary.com/mycloud/image/upload/v1588371243/my-folder/ctdoiku4lurn1a0hwt0t.jpg"
          },
          "description": {
            "type": "string",
            "example": "An awesome picture"
          },
          "user": {
            "properties": {
              "_id": {
                "type": "string",
                "format": "mongoose ObjectID",
                "example": "5ea71dbd8121dd1808f6e7fe"
              },
              "name": {
                "type": "string",
                "example": "Killua Mustang"
              },
              "userName": {
                "type": "string",
                "example": "killi_19"
              }
            }
          }
        }
      }
    },
    "parameters": {
      "tagParam": {
        "in": "query",
        "name": "tag",
        "schema": {
          "type": "string",
          "example": "url?tag=football"
        },
        "required": false,
        "description": "filter results by tags (Works for photos route)."
      },
      "filterParam": {
        "in": "query",
        "name": "filter",
        "schema": {
          "type": "string",
          "example": "url?commentCount[gt]=5"
        },
        "required": false,
        "description": "filter results based on field values. You can get use greater than(gt), less than (lt), Greater Than/Equal To (gte) or Less Than/Equal To (lte) to filter results."
      },
      "sortParam": {
        "in": "query",
        "name": "sort",
        "schema": {
          "type": "string",
          "example": "url?sort=userName"
        },
        "required": false,
        "description": "sort results by various fields (upvotes, comments count etc)"
      },
      "fieldsParam": {
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string",
          "example": "url?fields=userName,imageURL"
        },
        "required": false,
        "description": "return only selected fields in results. Multiple fields can be separated with commas. Adding a negative value to a parameter will return everything BUT that parameter."
      },
      "limitParam": {
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "string",
          "example": "url?limit=10"
        },
        "required": false,
        "description": "To limit amount of results released per 'page'"
      },
      "pageParam": {
        "in": "query",
        "name": "page",
        "schema": {
          "type": "string",
          "example": "url?page=2"
        },
        "required": false,
        "description": "To return a particular page of results (after pagination). For example, to get the second page of a response limited to 3 per request: url?page=2&limit=3"
      }
    }
  }
}